package service

import (
	"github.com/albatiqy/gopoh/contract/log"
	"github.com/albatiqy/gopoh/contract/validation"
)

type ServiceErrCode int

const (
	ErrNoRecords = ServiceErrCode(iota)
	ErrInternal
	ErrInvalidInput
)

type ServiceError struct {
	message string
	err error
	code ServiceErrCode
}

func (se ServiceError) Error() string {
	return se.message
}

func (se ServiceError) Unwrap() error {
	return se.err
}

func (se ServiceError) ErrCode() ServiceErrCode {
	return se.code
}

type validationError struct {
	message string
}

func (o validationError) Error() string {
	return o.message
}

func (o validationError) ValidationMessages() map[string][]string {
	return nil
}

type eFieldsLabel struct {
	lc     string
	labels map[string]string
}

func (l eFieldsLabel) GetLabel(structField string) string {
	if label, ok := l.labels[structField]; ok {
		return label
	}
	return structField
}

func newInternalError(message string, err error) error {
	log.Warning("internal error: ", message)
	return ServiceError{
		message: message,
		code: ErrInternal,
		err: err,
	}
}

func newValidationError(message string) validation.ValidationError {
	return validationError{
		message: message,
	}
}