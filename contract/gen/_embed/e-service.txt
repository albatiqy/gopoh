package service

import (
	"context"

	gopoh "github.com/albatiqy/gopoh/contract"
	gopohRepo "github.com/albatiqy/gopoh/contract/repository"
	"github.com/albatiqy/gopoh/contract/validation"{{if ne .imports ""}}
{{.imports}}{{end}}
)

type {{.entityStructName}}Service struct {
	gate gopoh.Gate
	q{{.entityStructName}}Reader core.Q{{.entityStructName}}Reader
	e{{.entityStructName}}Writer core.E{{.entityStructName}}Writer
	fieldsLabel gopoh.FieldsLabel
}

func (svc {{.entityStructName}}Service) Store(ctx context.Context, input core.E{{.entityStructName}}Input) (*core.E{{.entityStructName}}, error) {
	var err error
	if ctx, err = svc.gate.RequireKey(ctx); err != nil {
		return nil, err
	}

	v := svc.createE{{.entityStructName}}InputValidator(input)
/*
	v.CustomFieldRule("Nama", func(val interface{}) (bool, map[string]string) {
		return val.(string) == "agus", nil
	})
*/
	if vErr := v.Validate(); vErr != nil {
		return nil, vErr
	}

	// define autoID!
	{{.varKeyName}} :=
	record, err := svc.e{{.entityStructName}}Writer.Store(ctx, input, {{.varKeyName}})
	if err != nil {
		return nil, newInternalError(err.Error(), err)
	}

	return record, nil
}

func (svc {{.entityStructName}}Service) Update(ctx context.Context, input core.E{{.entityStructName}}Input, i{{.keyStructField}} interface{}) (*core.E{{.entityStructName}}, error) {
	var err error
	if ctx, err = svc.gate.RequireKey(ctx); err != nil {
		return nil, err
	}

	{{if ne .useIDConvertionFn "0"}}{{.varKeyName}}, err := svc.typeKeyE{{.entityStructName}}(i{{.keyStructField}})
	if err != nil {
		return nil, err
	}

	v := svc.createE{{.entityStructName}}InputValidator(input)
	if vErr := v.Validate(); vErr != nil {
		return nil, vErr
	}

	record, _, err := svc.e{{.entityStructName}}Writer.Update(ctx, input, {{.varKeyName}}){{else}}v := validation.NewInputValidator(input, nil)
	if vErr := v.Validate(); vErr != nil {
		return nil, vErr
	}

	record, _, err := svc.e{{.entityStructName}}Writer.Update(ctx, input, i{{.keyStructField}}.({{.keyType}})){{end}}
	if err != nil {
		return nil, newInternalError(err.Error(), err)
	}

	return record, nil
}

func (svc {{.entityStructName}}Service) Delete(ctx context.Context, i{{.keyStructField}} interface{}) error {
	var err error
	if ctx, err = svc.gate.RequireKey(ctx); err != nil {
		return err
	}

	{{if ne .useIDConvertionFn "0"}}{{.varKeyName}}, err := svc.typeKeyE{{.entityStructName}}(i{{.keyStructField}})
	if err != nil {
		return err
	}

	rowsAffected, err := svc.e{{.entityStructName}}Writer.Delete(ctx, {{.varKeyName}}){{else}}rowsAffected, err := svc.e{{.entityStructName}}Writer.Delete(ctx, i{{.keyStructField}}.({{.keyType}})){{end}}
	if err != nil {
		if err, ok := err.(gopoh.UserMessageError); ok {
			return err
		}
		return newInternalError(err.Error(), err)
	}

	if rowsAffected == 0 {
		return ServiceError{
			err: nil,
			code: ErrNoRecords,
		}
	}

	return nil
}

func (svc {{.entityStructName}}Service) GetByID(ctx context.Context, i{{.keyStructField}} interface{}) (*core.E{{.entityStructName}}, error) {
	var err error
	if ctx, err = svc.gate.RequireKey(ctx); err != nil {
		return nil, err
	}

	{{if ne .useIDConvertionFn "0"}}{{.varKeyName}}, err := svc.typeKeyE{{.entityStructName}}(i{{.keyStructField}})
	if err != nil {
		return nil, err
	}

	record, err := svc.q{{.entityStructName}}Reader.GetByID(ctx, {{.varKeyName}}){{else}}record, err := svc.q{{.entityStructName}}Reader.GetByID(ctx, i{{.keyStructField}}.({{.keyType}})){{end}}
	if err != nil {
		return nil, newInternalError(err.Error(), err)
	}

	return record, nil
}

func (svc {{.entityStructName}}Service) FindAll(ctx context.Context, finderOptionCursor gopohRepo.FinderOptionCursor) ([]core.Q{{.entityStructName}}, *gopohRepo.CursorData, error) {
	var err error
	if ctx, err = svc.gate.RequireKey(ctx); err != nil {
		return nil, nil, err
	}

	return svc.q{{.entityStructName}}Reader.CursorFindAll(ctx, finderOptionCursor)
}
{{if ne .useIDConvertionFn "0"}}
func (svc {{.entityStructName}}Service) typeKeyE{{.entityStructName}}(i{{.keyStructField}} interface{}) ({{.keyType}}, error) {
	{{if eq .useIDConvertionFn "1"}}switch realKey := i{{.keyStructField}}.(type) {
	case string:  // todo: type penyesuaian
		return strconv.ParseUint(realKey, 10, 64) // hati-hati
	case {{.keyType}}:
		return realKey, nil
	}
	return 0, ServiceError{
		err: nil,
		code: ErrInvalidInput,
	}{{else}}
	// tidak tahu return aja sendiri
	{{end}}
}
{{end}}
func (svc {{.entityStructName}}Service) createE{{.entityStructName}}InputValidator(input interface{}) validation.InputValidator {
	return validation.NewInputValidator(input, svc.fieldsLabel)
}

func New{{.entityStructName}}Service(gate gopoh.Gate, q{{.entityStructName}}Reader core.Q{{.entityStructName}}Reader, e{{.entityStructName}}Writer core.E{{.entityStructName}}Writer) (*{{.entityStructName}}Service, error) {
	return &{{.entityStructName}}Service{
		gate: gate,
		q{{.entityStructName}}Reader: q{{.entityStructName}}Reader,
		e{{.entityStructName}}Writer: e{{.entityStructName}}Writer,
		fieldsLabel: getQE{{.entityStructName}}FieldsLabel(),
	}, nil
}