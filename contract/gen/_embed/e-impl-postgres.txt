package repository

import (
	"context"
	// "database/sql"
{{if ne .imports ""}}
{{.imports}}{{end}}
	"github.com/albatiqy/gopoh/contract/repository/sqldb"
	// "github.com/albatiqy/gopoh/pkg/lib/null"
	// "github.com/albatiqy/gopoh/pkg/lib/decimal"
)

type {{.entityStructName}}Writer{{.dbDriverStr}} struct {
	conn *sqldb.Conn
	reader *{{.entityStructName}}Reader{{.dbDriverStr}}
}

func (w {{.entityStructName}}Writer{{.dbDriverStr}}) Store(ctx context.Context, input core.{{.entityStructName}}WriterInput, {{.varKeyName}} {{.keyType}}) (*core.E{{.entityStructName}}, error) {
	_, err := w.conn.ExecContext(ctx,
		"{{.sqlEStore}}",
		{{.varKeyName}},
{{.storeFieldArgs}}
	)
	if err != nil {
		return nil, err
	}

	return w.reader.GetByID(ctx, {{.varKeyName}})
}

// jika softDelete cek dulu di database
func (w {{.entityStructName}}Writer{{.dbDriverStr}}) Update(ctx context.Context, input core.{{.entityStructName}}WriterInput, {{.varKeyName}} {{.keyType}}) (*core.E{{.entityStructName}}, int64, error) {
	res, err := w.conn.ExecContext(ctx,
		"{{.sqlEUpdate}}",
{{.updateFieldArgs}}
		{{.varKeyName}},
	)
	if err != nil {
		return nil, 0, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return nil, 0, err
	}

	record, err := w.reader.GetByID(ctx, {{.varKeyName}})
	if err != nil {
		return nil, 0, err
	}

	return record, rowsAffected, nil
}
{{if eq .softDeleteStr ""}}
func (w {{.entityStructName}}Writer{{.dbDriverStr}}) Delete(ctx context.Context, {{.varKeyName}} {{.keyType}}) (int64, error) {
	res, err := w.conn.ExecContext(ctx,
		"{{.sqlEDelete}}",
		{{.varKeyName}},
	)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return rowsAffected, nil
}{{else}}
func (w {{.entityStructName}}Writer{{.dbDriverStr}}) Delete(ctx context.Context, {{.varKeyName}} {{.keyType}}) (int64, error) {
	deletedAt := time.Now().UTC()

	res, err := w.conn.ExecContext(ctx,
		"{{.sqlEDelete}}",
		deletedAt,
		{{.varKeyName}},
	)
	if err != nil {
		return 0, err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return rowsAffected, nil
}{{end}}

func New{{.entityStructName}}Writer{{.dbDriverStr}}(conn *sqldb.Conn, reader *{{.entityStructName}}Reader{{.dbDriverStr}}) (*{{.entityStructName}}Writer{{.dbDriverStr}}, error) {
	return &{{.entityStructName}}Writer{{.dbDriverStr}}{
		conn:   conn,
		reader: reader,
	}, nil
}